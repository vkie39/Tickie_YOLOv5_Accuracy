fine tuning: 이미 훈련된 모델에 특정 데이터 셋을 사용하여 추가적인 학습을 수행하는 작업.
                우리의 경우 코코 데이터 셋에다가 우리의 커스텀 데이터 셋 해서 하라는 뜻인 듯

fine tuning 하는 방법: 
방법 1) full fine-tuning :  모든 모델 매개변수를 포함하여 사전 학습된 모델 전체를 파인튜닝 하는 작업. 작업과 사전 학습딘 모델 사이에 큰 차이가 있거나 모델의 유연성 및 적응성이 높아야 하는 경후 적합한 방법. 많은 리소스와 시간 필요함
방법 2) Repurposing: 사전 학습된 모델의 하위 레이어를 그대로 유지하면서 모델의 상위 레이어 혹은 몇 개의 레이어를 파인튜닝하는 법. 드는 전력은 적지만 약간의 성능 저하가 발생 가능. 

방법: https://hi-ai0913.tistory.com/32

---------------------------------------------

알고리즘: 
1) 사고 이미지, 사고 동영상 모으고 어떤 기준으로 평가할 건지, 그 기준 찾기
(FPS정하고 평균적으로 몇 번 정도 등장하면 사고. 위험한 영상이 뭐다. 이런 거. 알아보기)

내 생각: 실시간으로 초 당 4번 이상 사람이 타 있는 킥보드를 인식하면  누워있는 사람을 인식하면 ("사람이 탄 킥보드 인식!")이라고 출력하게 만들고, 만약 누워있는 사람이 초당 3번 이상 보이면 ("누워있는 사람 발견!")이라고 출력.

구현한 코드:
import cv2
import torch
import time
from collections import defaultdict
import sys
import os

# Yolov5 디렉토리를 시스템 경로에 추가
yolov5_path = 'D:/대외 활동 및 프로젝트/YOLOv5 정확도 향상 (졸업작품)/git_clone/Tickie_YOLOv5_Accuracy/yolov5'
sys.path.append(yolov5_path)

from models.experimental import attempt_load
from utils.torch_utils import select_device

# 디바이스 설정
device = select_device('')

# 모델 로드 (경로를 문자열로 처리)
model_path = 'D:/대외 활동 및 프로젝트/YOLOv5 정확도 향상 (졸업작품)/git_clone/Tickie_YOLOv5_Accuracy/알고리즘 개발/best.pt'
model = attempt_load(model_path, map_location=device)

# 클래스 이름 리스트
class_names = model.module.names if hasattr(model, 'module') else model.names

# 비디오 캡처 (카메라 또는 비디오 파일)
cap = cv2.VideoCapture(0)  # '0'은 웹캠, 비디오 파일 경로도 가능

# 타임스탬프 초기화
start_time = time.time()

# 프레임 간격 설정 (초당 4번 체크)
frame_interval = 0.25  # 0.25초 간격

# 각 객체별로 초당 발생 빈도 카운트를 위한 딕셔너리 초기화
class_count = defaultdict(int)
kickboard_count = 0
lying_person_count = 0

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # 객체 감지
    img = torch.from_numpy(frame).to(device)
    img = img.permute(2, 0, 1).float()  # HWC to CHW
    img /= 255.0  # 0-255 to 0.0-1.0
    if img.ndimension() == 3:
        img = img.unsqueeze(0)
    
    pred = model(img)[0]

    # 결과 처리
    pred = pred[pred[:, 4] > 0.25]  # confidence threshold
    current_count = defaultdict(int)
    
    for *xyxy, conf, cls in pred:
        class_id = int(cls)
        class_name = class_names[class_id]
        current_count[class_name] += 1

    # 현재 시간
    current_time = time.time()

    # 1초가 경과했으면 카운트 리셋 및 출력
    if current_time - start_time >= frame_interval:
        start_time = current_time
        for class_name, count in current_count.items():
            if class_name == "사람이 탄 킥보드":  # 클래스 이름이 "사람이 탄 킥보드"일 경우
                kickboard_count += count
                if kickboard_count >= 4:
                    print("사람이 탄 킥보드 인식!")
                    kickboard_count = 0  # 카운트 리셋
            elif class_name == "누워있는 사람":  # 클래스 이름이 "누워있는 사람"일 경우
                lying_person_count += count
                if lying_person_count >= 3:
                    print("누워있는 사람 발견!")
                    lying_person_count = 0  # 카운트 리셋

    # 결과 프레임 표시 (선택 사항)
    for *xyxy, conf, cls in pred:
        label = f'{class_names[int(cls)]} {conf:.2f}'
        plot_one_box(xyxy, frame, label=label, color=(255, 0, 0), line_thickness=2)

    cv2.imshow('YOLOv5 Detection', frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):  # 'q' 키를 눌러 종료
        break

cap.release()
cv2.destroyAllWindows()

문제: 
    model = attempt_load(model_path, map_location=device)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
TypeError: attempt_load() got an unexpected keyword argument 'map_location' 

위의 오류가 남.

----------------------------------------------------------------------

3. 대조학슴 (콘스라스티브)
설명이 나온 블로그: https://data-newbie.tistory.com/879




